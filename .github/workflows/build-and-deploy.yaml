# yaml-language-server: $schema=./build.yaml
name: Build and Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  workflow_dispatch:

env:
  ACR_REGISTRY: endtoendgraphql.azurecr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 16.x
  SWA_NAME: graphql-end-to-end-workshop

permissions:
  id-token: write
  contents: read

jobs:
  build-backend:
    runs-on: ubuntu-latest
    environment:
      name: build-backend
    strategy:
      matrix:
        services: [{ "imageName": "backend", "directory": "./backend" }]
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage-backend: ${{ steps.image-tag.outputs.image-backend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.ACR_REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.services.directory }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=image-${{ matrix.services.imageName }}::${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'

  build-frontend:
    runs-on: ubuntu-latest
    environment:
      name: build-frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install packages
        run: npm install -ws

      - name: Build
        run: |
          VITE_GRAPHQL_WS_ENDPOINT=$(echo "${{ secrets.BACKEND_HOST }}" | sed -e 's/http/ws/g')
          echo VITE_GRAPHQL_WS_ENDPOINT=$VITE_GRAPHQL_WS_ENDPOINT >> .env

          npm run gen -w frontend
          npm run build -w frontend

      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./frontend/dist
          name: frontend

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    environment: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure resource group exists
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l ${{ secrets.RESOURCE_GROUP_LOCATION }}
      - name: Deploy Bicep
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ./deploy/main.bicep
          parameters: minReplicas=0 backendImage=${{ env.ACR_REGISTRY }}/${{ needs.build-backend.outputs.containerImage-backend }} backendPort=4000 containerRegistry=${{ env.ACR_REGISTRY }} containerRegistryUsername=${{ secrets.ACR_USER }} containerRegistryPassword=${{ secrets.ACR_PASSWORD }} swaName=${{ env.SWA_NAME }}
          failOnStdErr: false

      - name: Get SWA deployment token
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ env.SWA_NAME }} -o tsv --query properties.apiKey) >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: frontend

      - name: Deploy frontend
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          skip_app_build: true
          skip_api_build: true
          cwd: frontend
